{"version":3,"sources":["iceServe.ts","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["urls","credential","username","process","REACT_APP_SOCKET_URL","NODE_ENV","SOCKET_URL","SOCKET_PATH","App","videoRef","useRef","remoteVideoRef","callBtnRef","useState","cameraId","setCameraId","userName","setUserName","roomName","setRoomName","localStream","remoteStream","isPublisher","hasPublish","rtc","RTCPeerConnection","iceServers","console","log","socket","io","path","forceNew","reconnection","transports","createOffer","a","offer","sdp","setLocalDescription","emit","error","createAnswer","answer","publishStream","getTracks","forEach","track","addTrack","addEventListener","e","streams","video$","current","srcObject","candidate","on","sender","data","setRemoteDescription","addIceCandidate","callBtn$","disabled","signalingState","className","type","value","onChange","target","onClick","navigator","getUserMedia","video","id","mediaDevices","audio","then","catch","ref","width","height","autoPlay","muted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ab76f75.chunk.js","sourcesContent":["export default [\r\n\t{urls:'stun:stun01.sipphone.com'},\r\n\t{urls:'stun:stun.ekiga.net'},\r\n\t{urls:'stun:stun.fwdnet.net'},\r\n\t{urls:'stun:stun.ideasip.com'},\r\n\t{urls:'stun:stun.iptel.org'},\r\n\t{urls:'stun:stun.rixtelecom.se'},\r\n\t{urls:'stun:stun.schlund.de'},\r\n\t{urls:'stun:stun.l.google.com:19302'},\r\n\t{urls:'stun:stun1.l.google.com:19302'},\r\n\t{urls:'stun:stun2.l.google.com:19302'},\r\n\t{urls:'stun:stun3.l.google.com:19302'},\r\n\t{urls:'stun:stun4.l.google.com:19302'},\r\n\t{urls:'stun:stunserver.org'},\r\n\t{urls:'stun:stun.softjoys.com'},\r\n\t{urls:'stun:stun.voiparound.com'},\r\n\t{urls:'stun:stun.voipbuster.com'},\r\n\t{urls:'stun:stun.voipstunt.com'},\r\n\t{urls:'stun:stun.voxgratia.org'},\r\n\t{urls:'stun:stun.xten.com'},\r\n\t{\r\n\t\turls: 'turn:numb.viagenie.ca',\r\n\t\tcredential: 'muazkh',\r\n\t\tusername: 'webrtc@live.com'\r\n\t},\r\n\t{\r\n\t\turls: 'turn:192.158.29.39:3478?transport=udp',\r\n\t\tcredential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n\t\tusername: '28224511:1379330808'\r\n\t},\r\n\t{\r\n\t\turls: 'turn:192.158.29.39:3478?transport=tcp',\r\n\t\tcredential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\r\n\t\tusername: '28224511:1379330808'\r\n\t},\r\n]\r\n","export const { REACT_APP_SOCKET_URL, NODE_ENV } = process.env;\r\n\r\nexport const SOCKET_URL = REACT_APP_SOCKET_URL || '';\r\n\r\nexport const SOCKET_PATH = NODE_ENV === 'production' ? '/chat/socket.io' : '/socket.io';\r\n","import React, {useRef, useState} from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nimport iceServers from './iceServe';\r\nimport { SOCKET_URL, SOCKET_PATH } from './config';\r\n\r\ntype SdpMsg = SocketMsg<RTCSessionDescription>\r\n\r\ntype CandidateMsg = SocketMsg<RTCPeerConnectionIceEvent>\r\n\r\ntype SocketMsg<T = any> = {\r\n\tdata: T,\r\n\tsender: string,\r\n}\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const remoteVideoRef = useRef<HTMLVideoElement>(null);\r\n  const callBtnRef = useRef<HTMLButtonElement>(null);\r\n  const [cameraId, setCameraId] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n  const [roomName, setRoomName] = useState('');\r\n  let localStream: MediaStream | null = null;\r\n\r\n  let remoteStream: MediaStream | null = null;\r\n\r\n  let isPublisher: boolean = true;\r\n\r\n  let hasPublish: boolean = false;\r\n\r\n  const rtc = new RTCPeerConnection({\r\n\t  iceServers,\r\n  });\r\n  console.log(SOCKET_URL, SOCKET_PATH);\r\n  const socket = io(SOCKET_URL, {\r\n    path: SOCKET_PATH,\r\n    forceNew: true,\r\n    reconnection: false,\r\n    transports: ['websocket'],\r\n  });\r\n\r\n  rtc.addEventListener('track', (e) => {\r\n  \tconsole.log('远端track增加', e.streams);\r\n  \tconst video$ = remoteVideoRef.current;\r\n  \tconsole.log(video$);\r\n  \tremoteStream = e.streams[0];\r\n  \tif (video$ && video$.srcObject !== e.streams[0]) {\r\n  \t\tconsole.log(localStream, remoteStream);\r\n  \t\tvideo$.srcObject = remoteStream;\r\n\t  }\r\n  });\r\n\r\n  rtc.addEventListener('icecandidate', (e) => {\r\n  \tconsole.log('ice', e);\r\n  \tsocket.emit('candidate', e.candidate);\r\n  });\r\n\r\n  async function createOffer() {\r\n  \tif (hasPublish) return;\r\n    try {\r\n      const offer = await rtc.createOffer();\r\n      hasPublish = true;\r\n      console.log('创建offer', offer);\r\n      if (offer.sdp) {\r\n        await rtc.setLocalDescription(offer);\r\n        socket.emit('send_sdp', offer);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  async function createAnswer() {\r\n  \tif (hasPublish) return;\r\n    try {\r\n      const answer = await rtc.createAnswer();\r\n      hasPublish = true;\r\n      console.log('创建answer', answer);\r\n      if (answer.sdp) {\r\n        await rtc.setLocalDescription(answer);\r\n        socket.emit('send_sdp', answer);\r\n\t      // playRemote();\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }\r\n\r\n  socket.on('send_sdp', async (e: SdpMsg) => {\r\n    const { sender, data } = e;\r\n    console.log('收到sdp', e);\r\n    if (sender === userName) return;\r\n    await rtc.setRemoteDescription(data);\r\n    // createAnswer();\r\n  });\r\n\r\n  socket.on('candidate', async (e: CandidateMsg) => {\r\n  \tconst { sender, data } = e;\r\n  \tif (sender === userName) return;\r\n  \tif (!data) {\r\n  \t\t// playRemote();\r\n  \t\treturn;\r\n\t  }\r\n  \ttry {\r\n  \t\tconsole.log(data);\r\n  \t  await rtc.addIceCandidate(data as any);\r\n\t  } catch (e) {\r\n\t\t  console.error(e);\r\n\t  }\r\n  });\r\n\r\n  socket.on('call', (e: SocketMsg) => {\r\n  \tconst { sender } = e;\r\n  \tif (sender === userName) return;\r\n  \tconst callBtn$ = callBtnRef.current;\r\n  \tif (callBtn$) callBtn$.disabled = true;\r\n  \tisPublisher = false;\r\n  \tpublishStream();\r\n  });\r\n\r\n  function handlerGetCamera() {\r\n    navigator.getUserMedia({ video: true }, (e) => {\r\n      console.log(e);\r\n      setCameraId(e.id);\r\n\r\n    }, (e) => {\r\n      console.error(e)\r\n    })\r\n  }\r\n\r\n  function getLocalStream() {\r\n    navigator.mediaDevices.getUserMedia({audio: true, video: true})\r\n        .then((e) => {\r\n          if (videoRef.current) {\r\n            videoRef.current.srcObject = e;\r\n            localStream = e;\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        })\r\n  }\r\n\r\n  function loginRoom() {\r\n    socket.emit('login', userName, roomName, (e: boolean) => {\r\n      isPublisher = e;\r\n      console.log('是不是发布者', e);\r\n    });\r\n  }\r\n\r\n  rtc.addEventListener('negotiationneeded', (e) => {\r\n  \tconsole.log('rtc state', rtc.signalingState);\r\n    if (rtc.signalingState !== 'stable') return;\r\n  });\r\n\r\n\r\n  async function publishStream() {\r\n  \tif (!localStream) return;\r\n  \tlocalStream.getTracks().forEach((track) => {\r\n  \t  if (!localStream) return;\r\n  \t\trtc.addTrack(track, localStream);\r\n\t  });\r\n    if (isPublisher) {\r\n      await createOffer();\r\n    } else {\r\n      await createAnswer();\r\n    }\r\n  }\r\n\r\n  async function call() {\r\n  \tisPublisher = true;\r\n\t  await publishStream();\r\n\t  socket.emit('call');\r\n  }\r\n\r\n  function playRemote() {\r\n\t  if (!remoteStream) return;\r\n\t  const remoteVideo$ = remoteVideoRef.current;\r\n\t  if (!remoteVideo$) return;\r\n\t  remoteVideo$.srcObject = remoteStream;\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <input type=\"text\" value={userName} onChange={(e) => setUserName(e.target.value)}/>\r\n      <input type=\"text\" value={roomName} onChange={(e) => setRoomName(e.target.value)}/>\r\n      <button onClick={handlerGetCamera}>获取摄像头</button>\r\n      <button onClick={getLocalStream}>采集本地视频</button>\r\n      <button onClick={loginRoom}>登录房间</button>\r\n      <button ref={callBtnRef} onClick={call}>call</button>\r\n      <span>{cameraId}</span>\r\n      <video ref={videoRef} width=\"500\" height=\"500\" autoPlay={true} muted/>\r\n      <video ref={remoteVideoRef} width=\"500\" height=\"500\" autoPlay={true}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'webrtc-adapter';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}