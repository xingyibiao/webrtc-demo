{"version":3,"sources":["iceServe.ts","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["urls","credential","username","process","REACT_APP_SOCKET_URL","NODE_ENV","SOCKET_URL","SOCKET_PATH","socket","io","path","forceNew","reconnection","transports","App","videoRef","useRef","remoteVideoRef","callBtnRef","useState","cameraId","setCameraId","userName","setUserName","roomName","setRoomName","localStream","remoteStream","isPublisher","hasPublish","rtc","RTCPeerConnection","iceServers","createOffer","a","offer","sdp","setLocalDescription","emit","console","error","createAnswer","answer","publishStream","getTracks","forEach","track","addTrack","log","addEventListener","e","streams","video$","current","srcObject","candidate","on","sender","data","setRemoteDescription","addIceCandidate","callBtn$","disabled","signalingState","className","type","value","onChange","target","onClick","navigator","getUserMedia","video","id","mediaDevices","audio","then","catch","ref","width","height","autoPlay","muted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38121085.chunk.js","sourcesContent":["export default [\n\t{urls:'stun:stun01.sipphone.com'},\n\t{urls:'stun:stun.ekiga.net'},\n\t{urls:'stun:stun.fwdnet.net'},\n\t{urls:'stun:stun.ideasip.com'},\n\t{urls:'stun:stun.iptel.org'},\n\t{urls:'stun:stun.rixtelecom.se'},\n\t{urls:'stun:stun.schlund.de'},\n\t{urls:'stun:stun.l.google.com:19302'},\n\t{urls:'stun:stun1.l.google.com:19302'},\n\t{urls:'stun:stun2.l.google.com:19302'},\n\t{urls:'stun:stun3.l.google.com:19302'},\n\t{urls:'stun:stun4.l.google.com:19302'},\n\t{urls:'stun:stunserver.org'},\n\t{urls:'stun:stun.softjoys.com'},\n\t{urls:'stun:stun.voiparound.com'},\n\t{urls:'stun:stun.voipbuster.com'},\n\t{urls:'stun:stun.voipstunt.com'},\n\t{urls:'stun:stun.voxgratia.org'},\n\t{urls:'stun:stun.xten.com'},\n\t{\n\t\turls: 'turn:numb.viagenie.ca',\n\t\tcredential: 'muazkh',\n\t\tusername: 'webrtc@live.com'\n\t},\n\t{\n\t\turls: 'turn:192.158.29.39:3478?transport=udp',\n\t\tcredential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n\t\tusername: '28224511:1379330808'\n\t},\n\t{\n\t\turls: 'turn:192.158.29.39:3478?transport=tcp',\n\t\tcredential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',\n\t\tusername: '28224511:1379330808'\n\t},\n]\n","export const { REACT_APP_SOCKET_URL, NODE_ENV } = process.env;\n\nexport const SOCKET_URL = REACT_APP_SOCKET_URL || '';\n\nexport const SOCKET_PATH = NODE_ENV === 'production' ? '/chat/socket.io' : '/socket.io';\n","import React, {useRef, useState} from 'react';\nimport io from 'socket.io-client';\n\nimport iceServers from './iceServe';\nimport { SOCKET_URL, SOCKET_PATH } from './config';\n\ntype SdpMsg = SocketMsg<RTCSessionDescription>\n\ntype CandidateMsg = SocketMsg<RTCPeerConnectionIceEvent>\n\ntype SocketMsg<T = any> = {\n\tdata: T,\n\tsender: string,\n}\n\n\nconst socket = io(SOCKET_URL, {\n\tpath: SOCKET_PATH,\n\tforceNew: true,\n\treconnection: false,\n\ttransports: ['websocket'],\n});\n\n\nconst App: React.FC = () => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const remoteVideoRef = useRef<HTMLVideoElement>(null);\n  const callBtnRef = useRef<HTMLButtonElement>(null);\n  const [cameraId, setCameraId] = useState('');\n  const [userName, setUserName] = useState('');\n  const [roomName, setRoomName] = useState('');\n  let localStream: MediaStream | null = null;\n\n  let remoteStream: MediaStream | null = null;\n\n  let isPublisher: boolean = true;\n\n  let hasPublish: boolean = false;\n\n  const rtc = new RTCPeerConnection({\n\t  iceServers,\n  });\n  console.log(SOCKET_URL, SOCKET_PATH);\n\n\n  rtc.addEventListener('track', (e) => {\n  \tconsole.log('远端track增加', e.streams);\n  \tconst video$ = remoteVideoRef.current;\n  \tremoteStream = e.streams[0];\n  \tif (video$ && video$.srcObject !== e.streams[0]) {\n  \t\tvideo$.srcObject = remoteStream;\n\t  }\n  });\n\n  rtc.addEventListener('icecandidate', (e) => {\n  \tsocket.emit('candidate', e.candidate);\n  });\n\n  async function createOffer() {\n  \tif (hasPublish) return;\n    try {\n      const offer = await rtc.createOffer();\n      hasPublish = true;\n      if (offer.sdp) {\n        await rtc.setLocalDescription(offer);\n        socket.emit('send_sdp', offer);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async function createAnswer() {\n  \tif (hasPublish) return;\n    try {\n      const answer = await rtc.createAnswer();\n      hasPublish = true;\n      if (answer.sdp) {\n        await rtc.setLocalDescription(answer);\n        socket.emit('send_sdp', answer);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  socket.on('send_sdp', async (e: SdpMsg) => {\n    const { sender, data } = e;\n    console.log('收到sdp', e);\n    if (sender === userName) return;\n    await rtc.setRemoteDescription(data);\n  });\n\n  socket.on('candidate', async (e: CandidateMsg) => {\n  \tconst { sender, data } = e;\n  \tif (sender === userName) return;\n  \tif (!data) {\n  \t\t// playRemote();\n  \t\treturn;\n\t  }\n  \ttry {\n  \t\tconsole.log(data);\n  \t  await rtc.addIceCandidate(data as any);\n\t  } catch (e) {\n\t\t  console.error(e);\n\t  }\n  });\n\n  socket.on('call', (e: SocketMsg) => {\n  \tconst { sender } = e;\n  \tif (sender === userName) return;\n  \tconst callBtn$ = callBtnRef.current;\n  \tif (callBtn$) callBtn$.disabled = true;\n  \tisPublisher = false;\n  \tpublishStream();\n  });\n\n  function handlerGetCamera() {\n    navigator.getUserMedia({ video: true }, (e) => {\n      console.log(e);\n      setCameraId(e.id);\n\n    }, (e) => {\n      console.error(e)\n    })\n  }\n\n  function getLocalStream() {\n    navigator.mediaDevices.getUserMedia({audio: true, video: true})\n        .then((e) => {\n          if (videoRef.current) {\n            videoRef.current.srcObject = e;\n            localStream = e;\n          }\n        })\n        .catch((e) => {\n          console.error(e);\n        })\n  }\n\n  function loginRoom() {\n    socket.emit('login', userName, roomName, (e: boolean) => {\n      isPublisher = e;\n      console.log('是不是发布者', e);\n    });\n  }\n\n  rtc.addEventListener('negotiationneeded', (e) => {\n  \tconsole.log('rtc state', rtc.signalingState);\n    if (rtc.signalingState !== 'stable') return;\n  });\n\n\n  async function publishStream() {\n  \tif (!localStream) return;\n  \tlocalStream.getTracks().forEach((track) => {\n  \t  if (!localStream) return;\n  \t\trtc.addTrack(track, localStream);\n\t  });\n    if (isPublisher) {\n      await createOffer();\n    } else {\n      await createAnswer();\n    }\n  }\n\n  async function call() {\n  \tisPublisher = true;\n\t  await publishStream();\n\t  socket.emit('call');\n  }\n\n  function playRemote() {\n\t  if (!remoteStream) return;\n\t  const remoteVideo$ = remoteVideoRef.current;\n\t  if (!remoteVideo$) return;\n\t  remoteVideo$.srcObject = remoteStream;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <input type=\"text\" value={userName} onChange={(e) => setUserName(e.target.value)}/>\n      <input type=\"text\" value={roomName} onChange={(e) => setRoomName(e.target.value)}/>\n      <button onClick={handlerGetCamera}>获取摄像头</button>\n      <button onClick={getLocalStream}>采集本地视频</button>\n      <button onClick={loginRoom}>登录房间</button>\n      <button ref={callBtnRef} onClick={call}>call</button>\n      <span>{cameraId}</span>\n      <video ref={videoRef} width=\"500\" height=\"500\" autoPlay={true} muted/>\n      <video ref={remoteVideoRef} width=\"500\" height=\"500\" autoPlay={true}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'webrtc-adapter';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}